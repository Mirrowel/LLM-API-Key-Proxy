# This file configures the Release Drafter action.
# It automatically generates release notes based on commit messages and PR labels.
# The autolabeler is key for direct commits, as it assigns labels based on commit titles.

# The version and name for the release are set in the main workflow file.
name-template: 'Build $RESOLVED_VERSION'
tag-template: 'build-$RESOLVED_VERSION'

# This section is required for release-drafter to analyze commits.
# 'default: patch' ensures all changes are processed without bumping semantic versions.
version-resolver:
  major:
    labels: ['breaking', 'major']
  minor:
    labels: ['feature', 'enhancement', 'minor']
  patch:
    labels: ['fix', 'bug', 'chore', 'docs', 'style', 'refactor', 'performance', 'test', 'build', 'ci', 'dependencies']
  default: patch

# Labels to ignore when generating release notes.
exclude-labels:
  - 'skip-changelog'
  - 'duplicate'
  - 'invalid'
  - 'wontfix'

# Automatically assigns labels to commits based on their title.
# This is crucial for categorizing changes from direct commits.
autolabeler:
  - label: 'breaking'
    title:
      - '/breaking|major/i'
  - label: 'feature'
    title:
      - '/feat|feature|add|implement/i'
  - label: 'fix'
    title:
      - '/fix|bug|issue|resolve/i'
  - label: 'docs'
    title:
      - '/doc|readme|comment|documentation/i'
  - label: 'chore'
    title:
      - '/chore|update|bump|build|maintenance/i'
  - label: 'refactor'
    title:
      - '/refactor|cleanup|reorganize/i'
  - label: 'test'
    title:
      - '/test|testing|spec/i'
  - label: 'style'
    title:
      - '/style|format|lint/i'
  - label: 'performance'
    title:
      - '/perf|performance|optimize/i'
  - label: 'ci'
    title:
      - '/ci|workflow|action|github/i'
  - label: 'dependencies'
    title:
      - '/dep|dependencies|upgrade|package/i'

# Defines the sections in the release notes based on labels.
categories:
  - title: '🚀 New Features'
    labels:
      - 'feature'
      - 'enhancement'
      - 'new-feature'
  - title: '🐛 Bug Fixes'
    labels:
      - 'fix'
      - 'bug'
      - 'bugfix'
  - title: '📖 Documentation'
    labels:
      - 'docs'
      - 'documentation'
  - title: '🎨 Code Style & Formatting'
    labels:
      - 'style'
      - 'formatting'
  - title: '♻️ Code Refactoring'
    labels:
      - 'refactor'
      - 'refactoring'
  - title: '⚡ Performance Improvements'
    labels:
      - 'performance'
      - 'optimization'
  - title: '✅ Tests'
    labels:
      - 'test'
      - 'testing'
  - title: '🔧 Build System & CI/CD'
    labels:
      - 'build'
      - 'ci'
      - 'cd'
      - 'workflow'
  - title: '📦 Dependencies'
    labels:
      - 'dependencies'
      - 'deps'
  - title: '🧹 Maintenance & Chores'
    labels:
      - 'chore'
      - 'maintenance'
  - title: '⏪ Reverts'
    labels:
      - 'revert'
  - title: '💥 Breaking Changes'
    labels:
      - 'breaking'
      - 'breaking-change'
      - 'major'
  - title: '🔒 Security'
    labels:
      - 'security'
  - title: '📝 Other Changes'
    labels: []

# The main template for the body of the release notes.
# The workflow file prepends the "Build Information" section.
template: |
  ## What's Changed in this Build

  $CHANGES

  ## Contributors

  $CONTRIBUTORS

  ---
  
  **Full Changelog**: https://github.com/$OWNER/$REPOSITORY/compare/$PREVIOUS_TAG...$RESOLVED_VERSION

# How each line item in the changelog is formatted.
change-template: '- $TITLE @$AUTHOR'
change-title-escapes: '\<*_&'

# The message to display if no categorizable changes are found.
no-changes-template: |
  - No labeled changes in this release

# This is critical for ensuring the changelog is based on the previous build-* tag.
include-pre-releases: true

# Sorts the changes in ascending order (oldest first).
sort-direction: ascending
