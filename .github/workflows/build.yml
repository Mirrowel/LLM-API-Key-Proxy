name: Build and Release Executable

on:
  workflow_dispatch:
  push:
    paths:
      - 'src/proxy_app/**'
      - 'src/rotator_library/**'
      - 'setup_env.bat'
      - '.github/workflows/build.yml'
      - 'cliff.toml'

jobs:
  build:
    runs-on: windows-latest
    outputs:
      sha: ${{ steps.version.outputs.sha }}
    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: python src/proxy_app/build.py

    - name: Get short SHA
      id: version
      shell: pwsh
      run: |
        $sha = git rev-parse --short HEAD
        echo "sha=$sha" >> $env:GITHUB_OUTPUT

    - name: Archive build artifact
      uses: actions/upload-artifact@v4
      with:
        name: proxy-app-build-${{ steps.version.outputs.sha }}
        path: |
          src/proxy_app/dist/proxy_app.exe
          setup_env.bat
          .env.example

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Fetch all tags and history
      shell: bash
      run: git fetch --prune --unshallow --tags

    - name: Generate Build Version
      id: version
      shell: bash
      run: |
        BASE_VERSION=$(date +'%Y.%m.%d')-${{ needs.build.outputs.sha }}
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="$BASE_VERSION-${{ github.run_attempt }}"
        else
          VERSION="$BASE_VERSION"
        fi
        TIMESTAMP=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: proxy-app-build-${{ needs.build.outputs.sha }}
        path: release-assets

    - name: Archive release files
      id: archive
      shell: bash
      run: |
        ARCHIVE_NAME="LLM-API-Key-Proxy-Build-${{ needs.build.outputs.sha }}.zip"
        cd release-assets
        zip ../$ARCHIVE_NAME *
        cd ..
        echo "ASSET_PATH=$ARCHIVE_NAME" >> $GITHUB_OUTPUT

    - name: Install git-cliff
      shell: bash
      run: |
        LATEST_CLIFF_URL=$(curl -s https://api.github.com/repos/orhun/git-cliff/releases/latest | jq -r '.assets[] | select(.name | endswith("x86_64-unknown-linux-gnu.tar.gz")) | .browser_download_url')
        curl -L $LATEST_CLIFF_URL | tar xz
        sudo mv git-cliff-*/git-cliff /usr/local/bin/

    - name: Prepare git-cliff config
      shell: bash
      run: |
        # Inject the GitHub repo URL into your template
        sed -i "s|{{ repository_url }}|https://github.com/${GITHUB_REPOSITORY}|g" cliff.toml
        echo "✅ cliff.toml:"
        head -20 cliff.toml

    - name: Generate Changelog
      id: changelog
      shell: bash
      run: |
        echo "▶️ All build-* tags found:"; git tag --list 'build-*'
        LAST_TAG=$(git describe --tags --abbrev=0 --match="build-*" 2>/dev/null || echo "")
        echo "✅ Detected most recent ancestor tag: $LAST_TAG"
        
        RANGE="${LAST_TAG:+$LAST_TAG..HEAD}"
        echo "🔍 Generating changelog for range: $RANGE"

        git-cliff \
          --config cliff.toml \
          --strip all \
          --output changelog.md \
          ${RANGE:---unreleased}

        if [ -s changelog.md ]; then
          echo "✅ Changelog generated successfully"
          CHANGELOG_B64=$(base64 -w 0 changelog.md)
          echo "changelog_b64=$CHANGELOG_B64" >> $GITHUB_OUTPUT
          echo "has_changelog=true" >> $GITHUB_OUTPUT
          echo "previous_tag=$LAST_TAG" >> $GITHUB_OUTPUT
        else
          echo "⚠️ Empty changelog — falling back to manual list"
          
          # Manual fallback
          echo "## Recent Changes" > changelog.md
          echo "" >> changelog.md
          
          if [ -n "$LAST_TAG" ]; then
            echo "### 📝 Commits since $LAST_TAG:" >> changelog.md
            git log --oneline --pretty=format:"- %s (\`%h\`)" "$LAST_TAG..HEAD" >> changelog.md
          else
            echo "### 📝 Recent commits:" >> changelog.md
            git log --oneline --pretty=format:"- %s (\`%h\`)" -10 >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "> This changelog was generated manually due to git-cliff issues." >> changelog.md
          
          CHANGELOG_B64=$(base64 -w 0 changelog.md)
          echo "changelog_b64=$CHANGELOG_B64" >> $GITHUB_OUTPUT
          echo "has_changelog=true" >> $GITHUB_OUTPUT
        fi

    - name: Debug artifact contents
      shell: bash
      run: |
        echo "🔍 Debugging artifact contents..."
        echo "Current directory:"
        pwd
        echo ""
        echo "Release assets directory contents:"
        ls -la release-assets/ || echo "release-assets directory not found"
        echo ""
        echo "All files in current directory:"
        find . -name "*.exe" -o -name "*.bat" -o -name ".env*" | head -20
        echo ""
        echo "Directory structure:"
        find release-assets -type f 2>/dev/null || echo "No files found in release-assets"

    - name: Generate Build Metadata
      id: metadata
      shell: bash
      run: |
        # Find the executable file
        EXE_FILE=$(find release-assets -name "proxy_app.exe" -type f | head -1)
        
        if [ -n "$EXE_FILE" ]; then
          BUILD_SIZE=$(du -sh "$EXE_FILE" | cut -f1)
          echo "✅ Found executable at: $EXE_FILE (Size: $BUILD_SIZE)"
        else
          # Fallback: look for any .exe file
          EXE_FILE=$(find release-assets -name "*.exe" -type f | head -1)
          if [ -n "$EXE_FILE" ]; then
            BUILD_SIZE=$(du -sh "$EXE_FILE" | cut -f1)
            echo "✅ Found executable at: $EXE_FILE (Size: $BUILD_SIZE)"
          else
            BUILD_SIZE="Unknown"
            echo "⚠️ No executable file found"
          fi
        fi
        
        COMMIT_COUNT=$(git rev-list --count HEAD)
        CONTRIBUTORS=$(git log --format='%an' | sort -u | wc -l)
        
        echo "build_size=$BUILD_SIZE" >> $GITHUB_OUTPUT
        echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
        echo "contributors=$CONTRIBUTORS" >> $GITHUB_OUTPUT
        
        echo "📊 Build metadata:"
        echo "  - Size: $BUILD_SIZE"
        echo "  - Commits: $COMMIT_COUNT"
        echo "  - Contributors: $CONTRIBUTORS"

    - name: Create Release
      shell: bash
      run: |
        if [ "${{ steps.changelog.outputs.has_changelog }}" == "true" ]; then
          echo "${{ steps.changelog.outputs.changelog_b64 }}" | base64 -d > decoded_changelog.md
          CHANGELOG_CONTENT=$(cat decoded_changelog.md)
        else
          CHANGELOG_CONTENT="No significant changes detected in this release."
        fi
        
        NOTES="## Build Information
        | Field | Value |
        |-------|-------|
        | 📦 **Version** | \`${{ steps.version.outputs.version }}\` |
        | 💾 **Binary Size** | \`${{ steps.metadata.outputs.build_size }}\` |
        | 🔗 **Commit** | [\`${{ needs.build.outputs.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) |
        | 📅 **Build Date** | \`${{ steps.version.outputs.timestamp }}\` |
        | ⚡ **Trigger** | \`${{ github.event_name }}\` |
        | 👥 **Total Contributors** | \`${{ steps.metadata.outputs.contributors }}\` |
        | 📊 **Total Commits** | \`${{ steps.metadata.outputs.commit_count }}\` |

        ## 📋 What's Changed

        $CHANGELOG_CONTENT

        ### 📁 Included Files
        | File | Description | Size |
        |------|-------------|------|
        | \`proxy_app.exe\` | Main application executable | Primary |
        | \`setup_env.bat\` | Environment setup script | Helper |
        | \`.env.example\` | Configuration template | Template |

        ## 🔗 Useful Links
        - 📖 [Documentation](https://github.com/${{ github.repository }}/wiki)
        - 🐛 [Report Issues](https://github.com/${{ github.repository }}/issues)
        - 💬 [Discussions](https://github.com/${{ github.repository }}/discussions)
        - 🌟 [Star this repo](https://github.com/${{ github.repository }}) if you find it useful!

        ---
        
        > **Note**: This is an automated build release."

        NOTES="$NOTES\n\n**Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.changelog.outputs.previous_tag }}...build-${{ steps.version.outputs.version }}"

        gh release create build-${{ steps.version.outputs.version }} \
          --title "Build ${{ steps.version.outputs.version }}" \
          --notes "$NOTES" \
          --latest \
          ${{ steps.archive.outputs.ASSET_PATH }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
