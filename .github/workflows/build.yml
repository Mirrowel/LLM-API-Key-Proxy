name: Build and Release Executable

on:
  # Allows manual runs from the Actions tab
  workflow_dispatch:
  # Triggers on pushes to any branch with this workflow file
  push:
    paths:
      - 'src/proxy_app/**'
      - 'src/rotator_library/**'
      - 'setup_env.bat'
      - '.github/workflows/build.yml'
      - '.github/release-drafter.yml'

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      pull-requests: read # Needed for release-drafter to access PR data if available

    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        # Fetch all history for release-drafter to work correctly
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: python src/proxy_app/build.py

    - name: Generate Build Version
      id: version
      shell: pwsh
      run: |
        $date = Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC'
        $sha = git rev-parse --short HEAD
        $baseVersion = "$(Get-Date -Format 'yyyyMMdd')-$sha"
        
        # Append run attempt for manual runs to ensure unique tags for testing
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "$baseVersion-${{ github.run_attempt }}"
        } else {
          $version = $baseVersion
        }
        
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "sha=$sha" >> $env:GITHUB_OUTPUT
        echo "timestamp=$date" >> $env:GITHUB_OUTPUT

    - name: Archive release files
      id: archive
      shell: pwsh
      run: |
        $archiveName = "LLM-API-Key-Proxy-Build-${{ steps.version.outputs.sha }}.zip"
        $filesToArchive = @(
          "src/proxy_app/dist/proxy_app.exe",
          "setup_env.bat",
          ".env.example"
        )
        Compress-Archive -Path $filesToArchive -DestinationPath $archiveName
        echo "ASSET_PATH=$archiveName" >> $env:GITHUB_OUTPUT

    - name: Draft Release Notes
      id: release_drafter
      uses: release-drafter/release-drafter@v6
      with:
        # Use release-drafter to generate changelog, but don't publish
        publish: false
        commitish: ${{ github.sha }}
        tag: build-${{ steps.version.outputs.version }}
        name: Build ${{ steps.version.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Final Release
      id: final_release
      shell: pwsh
      run: |
        $tagName = "build-${{ steps.version.outputs.version }}"
        $releaseName = "Build ${{ steps.version.outputs.version }}"
        $drafterBody = "${{ steps.release_drafter.outputs.body }}"
        
        # Prepend custom build information to the generated changelog
        $header = @"
        ## Build Information
        - **Commit**: `${{ github.sha }}`
        - **Date**: `${{ steps.version.outputs.timestamp }}`
        - **Trigger**: `${{ github.event_name }}`
        "@

        $finalBody = "$header`n`n$drafterBody"

        # Create the final release using the GitHub CLI
        gh release create $tagName --title $releaseName --notes $finalBody --latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      shell: pwsh
      run: |
        $tagName = "build-${{ steps.version.outputs.version }}"
        $assetPath = "${{ steps.archive.outputs.ASSET_PATH }}"
        
        # Upload the zipped build artifact to the release
        gh release upload $tagName $assetPath --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
