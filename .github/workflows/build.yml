name: Build and Release Executable

on:
  workflow_dispatch:
  push:
    # No branch restriction, will run on any branch with this file
    paths:
      - 'src/proxy_app/**'
      - 'src/rotator_library/**'
      - 'setup_env.bat'
      - '.github/workflows/build.yml'
      - '.github/release-drafter.yml'

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      pull-requests: read # Still needed for release-drafter to read PRs if they exist

    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: python src/proxy_app/build.py

    - name: Generate Build Version
      id: version
      shell: pwsh
      run: |
        $date = Get-Date -Format 'yyyyMMdd'
        $sha = git rev-parse --short HEAD
        $baseVersion = "$date-$sha"
        
        # Append run attempt for manual runs to ensure unique tags
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "$baseVersion-${{ github.run_attempt }}"
        } else {
          $version = $baseVersion
        }
        
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "sha=$sha" >> $env:GITHUB_OUTPUT

    - name: Archive release files
      id: archive
      shell: pwsh
      run: |
        $archiveName = "LLM-API-Key-Proxy-Build-${{ steps.version.outputs.sha }}.zip"
        $filesToArchive = @(
          "src/proxy_app/dist/proxy_app.exe",
          "setup_env.bat",
          ".env.example"
        )
        Compress-Archive -Path $filesToArchive -DestinationPath $archiveName
        echo "ASSET_PATH=$archiveName" >> $env:GITHUB_OUTPUT

    - name: Draft and Publish Release
      id: release_drafter
      uses: release-drafter/release-drafter@v6
      with:
        # This will create a release, or update an existing one
        publish: true
        # Marks the release as a pre-release
        prerelease: true
        commitish: ${{ github.ref_name }}
        version: ${{ steps.version.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.release_drafter.outputs.upload_url }}
        asset_path: ${{ steps.archive.outputs.ASSET_PATH }}
        asset_name: ${{ steps.archive.outputs.ASSET_PATH }}
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
