name: Build and Release Executable

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'src/proxy_app/**'
      - 'src/rotator_library/**'
      - 'setup_env.bat'
      - '.github/workflows/build.yml'
      - '.github/release-drafter.yml'
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      pull-requests: read
    
    # Only run on main branch pushes or merged PRs
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.merged == true)

    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: python src/proxy_app/build.py

    - name: Generate Build Version
      id: version
      shell: pwsh
      run: |
        $date = Get-Date -Format 'yyyyMMdd'
        $sha = git rev-parse --short HEAD
        $version = "$date-$sha"
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "sha=$sha" >> $env:GITHUB_OUTPUT

    - name: Archive release files
      id: archive
      shell: pwsh
      run: |
        $archiveName = "LLM-API-Key-Proxy-Build-${{ steps.version.outputs.sha }}.zip"
        $filesToArchive = @(
          "src/proxy_app/dist/proxy_app.exe",
          "setup_env.bat",
          ".env.example"
        )
        Compress-Archive -Path $filesToArchive -DestinationPath $archiveName
        echo "ASSET_PATH=$archiveName" >> $env:GITHUB_OUTPUT

    - name: Draft Release
      id: release_drafter
      uses: release-drafter/release-drafter@v6
      with:
        publish: false
        commitish: ${{ github.ref_name }}
        version: ${{ steps.version.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish Release and Upload Asset
      shell: pwsh
      run: |
        $releaseId = "${{ steps.release_drafter.outputs.id }}"
        $assetPath = "${{ steps.archive.outputs.ASSET_PATH }}"
        $tagName = "build-${{ steps.version.outputs.version }}"

        if (-not $releaseId) {
          Write-Host "Release drafter failed to create a draft. Creating a new release."
          gh release create $tagName --title "Build ${{ steps.version.outputs.version }}" --notes "Automated build release."
        } else {
          Write-Host "Publishing release draft..."
          gh api repos/${{ github.repository }}/releases/$releaseId -X PATCH -f draft=false
        }

        Write-Host "Uploading asset to release $tagName..."
        gh release upload $tagName $assetPath --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
