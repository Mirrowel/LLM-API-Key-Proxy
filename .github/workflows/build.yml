name: Build and Release Executable

on:
  # Allows manual runs from the Actions tab
  workflow_dispatch:
  # Triggers on pushes to any branch with this workflow file
  push:
    paths:
      - 'src/proxy_app/**'
      - 'src/rotator_library/**'
      - 'setup_env.bat'
      - '.github/workflows/build.yml'
      - '.github/release-drafter.yml'

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      pull-requests: read # Needed for release-drafter to access PR data if available
    outputs:
      sha: ${{ steps.version.outputs.sha }}
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        # Fetch all history for release-drafter to work correctly
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: python src/proxy_app/build.py

    - name: Get short SHA
      id: version
      shell: pwsh
      run: |
        $sha = git rev-parse --short HEAD
        echo "sha=$sha" >> $env:GITHUB_OUTPUT

    - name: Archive build artifact
      uses: actions/upload-artifact@v4
      with:
        name: proxy-app-build-${{ steps.version.outputs.sha }}
        path: |
          src/proxy_app/dist/proxy_app.exe
          setup_env.bat
          .env.example

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate Build Version
      id: version
      shell: bash
      run: |
        VERSION=$(date +'%Y.%m.%d')-${{ needs.build.outputs.sha }}
        TIMESTAMP=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

    - name: Debug Release Drafter Inputs
      run: |
        echo "Tag: build-${{ steps.version.outputs.version }}"
        echo "Version: ${{ steps.version.outputs.version }}"

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: proxy-app-build-${{ needs.build.outputs.sha }}
        path: release-assets

    - name: Archive release files
      id: archive
      shell: bash
      run: |
        ARCHIVE_NAME="LLM-API-Key-Proxy-Build-${{ needs.build.outputs.sha }}.zip"
        cd release-assets
        zip ../$ARCHIVE_NAME *
        cd ..
        echo "ASSET_PATH=$ARCHIVE_NAME" >> $GITHUB_OUTPUT

    - name: Create Release with Release-Drafter
      id: release_drafter
      uses: release-drafter/release-drafter@v6
      with:
        publish: true
        prerelease: false
        commitish: ${{ github.sha }}
        tag: build-${{ steps.version.outputs.version }}
        name: Build ${{ steps.version.outputs.version }}
        version: ${{ steps.version.outputs.version }}
        header: |
          ## Build Information
          - **Commit**: ${{ needs.build.outputs.sha }}
          - **Date**: ${{ steps.version.outputs.timestamp }}
          - **Trigger**: ${{ github.event_name }}

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      shell: bash
      run: |
        gh release upload build-${{ steps.version.outputs.version }} ${{ steps.archive.outputs.ASSET_PATH }} --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
